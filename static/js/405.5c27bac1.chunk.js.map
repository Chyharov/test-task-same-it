{"version":3,"file":"static/js/405.5c27bac1.chunk.js","mappings":"sKACA,GAAiB,E,SCWjB,EATe,WACX,OACI,iBAAKA,UAAWC,EAAAA,OAAhB,WACI,SAAC,KAAD,CAAMC,GAAG,IAAT,8FACA,SAAC,KAAD,CAAMA,GAAG,mBAAT,2GAGX,ECTD,GAAgB,cAAgB,+BCahC,EAXe,WACb,OACE,mBAAQF,UAAWC,EAAAA,OAAnB,UACE,iBAAKD,UAAW,aAAeC,EAAAA,gBAA/B,WACE,eAAID,UAAWC,EAAAA,cAAf,mBACA,SAAC,EAAD,QAIP,C,sICOD,EAlB8B,SAAC,GAAiB,IAAfE,EAAc,EAAdA,QAE/B,OACE,4BACE,gIACA,wBACGA,EAAQC,KAAI,SAACC,GAAD,OACX,yBACE,yBAAIA,EAAOC,gBAAX,MAA+BD,EAAOE,gBAD/BF,EAAOG,OADL,QAQpB,ECaD,EA1B6B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9B,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAUA,OACE,4BACE,kBACEC,KAAK,OACLC,YAAY,6MACZC,MAAOJ,EACPK,SAdoB,SAACC,GACzBL,EAAcK,EAAMC,OAAOH,MAC5B,KAcG,mBAAQI,QAZS,WACnBV,EAASE,EACV,EAUG,8CAGL,E,SCKD,EAvBwB,WACtB,OAA8BD,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBiB,EAAhB,KAEMC,EAAY,mCAAG,WAAOV,GAAP,iGAEWW,EAAAA,EAAAA,IAAqBX,GAFhC,OAEXY,EAFW,OAGjBH,EAAWG,GAHM,gDAKjBC,QAAQC,MAAM,qBAAd,MALiB,yDAAH,sDASlB,OACE,iCACE,SAACC,EAAA,EAAD,KACA,6BACE,SAAC,EAAD,CAAsBjB,SAAUY,KAChC,SAAC,EAAD,CAAuBlB,QAASA,SAIvC,C,uHCzBKwB,EAAS,mCACTC,EAAS,uCAEFN,EAAoB,mCAAG,2GAAOO,EAAP,+BAAc,GAAd,kBAETC,EAAAA,EAAAA,KAAWF,EAAQ,CACxCD,OAAAA,EACAI,UAAW,UACXC,aAAc,gBACdC,iBAAkB,CAChBC,SAAS,GAAD,OAAKL,GACbM,SAAU,QARkB,sBAExBC,EAFwB,EAExBA,OAUIA,EAAKC,SAAWD,EAAKA,MAZD,0CAavBA,EAAKA,MAbkB,cAexB,IAAIE,MAAM,2BAfc,gEAkBhCd,QAAQC,MAAM,qBAAd,MAlBgC,+DAAH,qDAuBpBc,EAAe,mCAAG,WAAOC,GAAP,gGAEJV,EAAAA,EAAAA,KACrBF,EACA,CACED,OAAAA,EACAI,UAAW,mBACXC,aAAc,qBACdC,iBAAkB,CAChBQ,UAAW,CACT,CACEC,eAAgBF,EAChBG,MAAO,QAZU,cAErBC,EAFqB,yBAmBpBA,EAASR,MAnBW,uCAqB3BZ,QAAQC,MAAM,gCAAd,MArB2B,kBAsBpB,MAtBoB,yDAAH,qD","sources":["components/NavBar/NavBar.module.scss","components/NavBar/NavBar.jsx","webpack://test-task-same-it/./src/components/Header/Header.module.scss?6eb7","components/Header/Header.jsx","components/NovaPoshtaOfficesList/NovaPoshtaOfficesList.jsx","components/NovaPoshtaOfficeForm/NovaPoshtaOfficeForm.jsx","pages/DepartmentsList/DepartmentsList.jsx","services/Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { Link } from 'react-router-dom';\nimport s from './NavBar.module.scss';\n\nconst NavBar = () => {\n    return (\n        <nav className={s.navBar}>\n            <Link to=\"/\">Перевірити ТТН</Link>\n            <Link to=\"/DepartmentsList\">Список відділень</Link>\n        </nav>\n  )\n};\n\nexport default NavBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"header__title\":\"Header_header__title__zG0D0\"};","import NavBar from 'components/NavBar/NavBar';\nimport s from './Header.module.scss';\n\nconst Header = () => {\n  return (\n    <header className={s.header}>\n      <div className={'container ' + s.header__padding}>\n        <h1 className={s.header__title}>Logo</h1>\n        <NavBar />\n      </div>\n    </header>\n  )\n};\n\nexport default Header;\n","\nconst NovaPoshtaOfficesList = ({ offices }) => {\n\n  return (\n    <div>\n      <h2>Результати пошуку:</h2>\n      <ul>\n        {offices.map((office) => (\n          <li key={office.Number}>\n            <p>{office.CityDescription} - {office.Description}</p> \n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n\n\nexport default NovaPoshtaOfficesList;","import React, { useState } from \"react\";\n\nconst NovaPoshtaOfficeForm = ({ onSearch }) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleSearch = () => {\n    onSearch(searchTerm);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Введіть назву міста українською мовою\"\n        value={searchTerm}\n        onChange={handleInputChange}\n      />\n      <button onClick={handleSearch}>Пошук</button>\n    </div>\n  );\n};\n\n\n\nexport default NovaPoshtaOfficeForm;","import React, { useState } from \"react\";\nimport Header from \"components/Header/Header\";\nimport NovaPoshtaOfficesList from \"../../components/NovaPoshtaOfficesList/NovaPoshtaOfficesList\";\nimport NovaPoshtaOfficeForm from \"../../components/NovaPoshtaOfficeForm/NovaPoshtaOfficeForm\";\nimport { getNovaPoshtaOffices } from \"../../services/Api\";\n\nconst DepartmentsList = () => {\n  const [offices, setOffices] = useState([]);\n\n  const handleSearch = async (searchTerm) => {\n    try {\n      const searchResults = await getNovaPoshtaOffices(searchTerm);\n      setOffices(searchResults);\n    } catch (error) {\n      console.error(\"An error occurred:\", error);\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <main>\n        <NovaPoshtaOfficeForm onSearch={handleSearch} />\n        <NovaPoshtaOfficesList offices={offices} />\n      </main>\n    </>\n  );\n};\n\nexport default DepartmentsList;","import axios from \"axios\";\n\nconst apiKey = \"cfd822868f3c257a0d180413d03f97e2\";\nconst apiURL = \"https://api.novaposhta.ua/v2.0/json/\";\n\nexport const getNovaPoshtaOffices = async (city = \"\") => {\n  try {\n    const { data } = await axios.post(apiURL, {\n      apiKey,\n      modelName: \"Address\",\n      calledMethod: \"getWarehouses\",\n      methodProperties: {\n        CityName: `${city}`,\n        Language: \"ua\",\n      },\n    });\n\n    if (data && data.success && data.data) {\n      return data.data;\n    } else {\n      throw new Error(\"Invalid response format\");\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    throw error;\n  }\n};\n\nexport const getTrackingInfo = async (trackingNumber) => {\n  try {\n    const response = await axios.post(\n      apiURL,\n      {\n        apiKey,\n        modelName: \"TrackingDocument\",\n        calledMethod: \"getStatusDocuments\",\n        methodProperties: {\n          Documents: [\n            {\n              DocumentNumber: trackingNumber,\n              Phone: \"\",\n            },\n          ],\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching tracking info:\", error);\n    return null;\n  }\n};\n\nexport const getNovaPoshtaCityList = async () => {\n  try {\n    const { data } = await axios.post(apiURL, {\n      apiKey,\n      modelName: \"Address\",\n      calledMethod: \"getCities\",\n      methodProperties: {\n        Language: \"ua\",\n      },\n    });\n\n    if (data && data.success && data.data) {\n      return data.data;\n    } else {\n      throw new Error(\"Invalid response format\");\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    throw error;\n  }\n};\n"],"names":["className","s","to","offices","map","office","CityDescription","Description","Number","onSearch","useState","searchTerm","setSearchTerm","type","placeholder","value","onChange","event","target","onClick","setOffices","handleSearch","getNovaPoshtaOffices","searchResults","console","error","Header","apiKey","apiURL","city","axios","modelName","calledMethod","methodProperties","CityName","Language","data","success","Error","getTrackingInfo","trackingNumber","Documents","DocumentNumber","Phone","response"],"sourceRoot":""}